From 661296eff65876f75e00255d05f0ef11bb3b7ee1 Mon Sep 17 00:00:00 2001
From: Nathan Rossi <nathan@nathanrossi.com>
Date: Mon, 16 Sep 2019 19:18:52 +1000
Subject: [PATCH] libtrellis/CMakeLists.txt: Rework Boost::python version
 checking

Simplify the Boost::python package finding. Replace the multiple loops
with a single foreach where the version of the python libs is checked
first in order with minor version as well. And additionally the manual
version strings of 36, 37 and 38. The "python-pn*" component is checked
first then the "python*" component.

The purpose for this change is to fix issues where the python libs
version of "python*" is not checked. As well as resolving the issue
where the boost component is cached as not found given an incompatible
python version (which the boost cmake scripts set based on the
find_package component), this is fixed by searching for the expected
version of python first (the one matching python libs version).

Signed-off-by: Nathan Rossi <nathan@nathanrossi.com>
---
 libtrellis/CMakeLists.txt | 50 ++++++++++++++-------------------------
 1 file changed, 18 insertions(+), 32 deletions(-)

diff --git a/libtrellis/CMakeLists.txt b/libtrellis/CMakeLists.txt
index b139766c67..bb8f66090d 100644
--- a/libtrellis/CMakeLists.txt
+++ b/libtrellis/CMakeLists.txt
@@ -38,44 +38,30 @@ if (BUILD_PYTHON)
     # Some distributions (Arch) call it libboost_python3, others such as Ubuntu
     # call it libboost_python35. In the latter case we must consider all minor versions
     # Original source: https://github.com/BVLC/caffe/blob/master/cmake/Dependencies.cmake#L148
-    set(version ${PYTHONLIBS_VERSION_STRING})
 
-    STRING(REGEX REPLACE "[^0-9]" "" boost_py_version "${version}")
-    find_package(Boost COMPONENTS "python-py${boost_py_version}" ${boost_libs})
-    set(Boost_PYTHON_FOUND ${Boost_PYTHON-PY${boost_py_version}_FOUND})
-
-    while (NOT "${version}" STREQUAL "" AND NOT Boost_PYTHON_FOUND)
-        STRING(REGEX REPLACE "([0-9.]+).[0-9]+" "\\1" version "${version}")
-
-        STRING(REGEX REPLACE "[^0-9]" "" boost_py_version "${version}")
-        find_package(Boost COMPONENTS "python-py${boost_py_version}" ${boost_libs})
-        set(Boost_PYTHON_FOUND ${Boost_PYTHON-PY${boost_py_version}_FOUND})
-
-        STRING(REGEX MATCHALL "([0-9.]+).[0-9]+" has_more_version "${version}")
-        if ("${has_more_version}" STREQUAL "")
+    # split the version string into list of x, xy, xyz, x.y
+    # Note: 'x.y' is added for gentoo
+    STRING(REGEX REPLACE "([0-9.]+).([0-9]+).([0-9]+)" "\\1;\\1\\2;\\1\\2\\3;\\1.\\2" versions "${PYTHONLIBS_VERSION_STRING}")
+    # add additional search versions
+    set(versions "${versions};36;37;38")
+
+    foreach (py_ver ${versions})
+        # check python-py*
+        find_package(Boost COMPONENTS "python-py${py_ver}" ${boost_libs})
+        set(Boost_PYTHON_FOUND ${Boost_PYTHON-PY${py_ver}_FOUND})
+        if (Boost_PYTHON_FOUND)
             break()
         endif ()
-    endwhile ()
-
-    if (NOT Boost_PYTHON_FOUND)
-        foreach (PyVer 3 36 37 38)
-            find_package(Boost COMPONENTS python${PyVer} ${boost_libs})
-            if ("${Boost_LIBRARIES}" MATCHES ".*(python|PYTHON).*" )
-                set(Boost_PYTHON_FOUND TRUE)
-                break()
-            endif ()
-        endforeach ()
-    endif ()
 
-    if (NOT Boost_PYTHON_FOUND)
-        STRING(REGEX REPLACE "([0-9]+\\.[0-9]+).*" "\\1" gentoo_version ${PYTHONLIBS_VERSION_STRING})
-        find_package(Boost COMPONENTS python-${gentoo_version} ${boost_libs})
-        if ("${Boost_LIBRARIES}" MATCHES ".*(python|PYTHON).*" )
-            set(Boost_PYTHON_FOUND TRUE)
+        # check python*
+        find_package(Boost COMPONENTS python${py_ver} ${boost_libs})
+        set(Boost_PYTHON_FOUND ${Boost_PYTHON${py_ver}_FOUND})
+        if (Boost_PYTHON_FOUND)
+            break()
         endif ()
-    endif ()
+    endforeach ()
 
-    if (NOT Boost_PYTHON_FOUND )
+    if (NOT Boost_PYTHON_FOUND)
         message( FATAL_ERROR "No version of Boost::Python 3.x could be found.")
     endif ()
 endif()
